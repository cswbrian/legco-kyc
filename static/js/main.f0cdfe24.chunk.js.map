{"version":3,"sources":["themes/index.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","typography","fontFamily","join","h4","fontSize","fontWeight","palette","primary","purple","secondary","green","status","danger","Group","styled","Grid","AvatarContainer","spacing","AvatarChart","props","answers","container","justify","Object","entries","map","pair","label","ppl","item","xs","sm","Typography","variant","gutterBottom","length","p","direction","alignItems","Avatar","className","alt","src","App","res","url","options","useState","response","setResponse","error","setError","useEffect","a","fetch","text","csv","fromString","then","json","fetchData","useFetch","data","arr","pureAnswer","forEach","k","key","value","push","ThemeProvider","Container","maxWidth","dat","question_title","paragraph","description_text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f0cdfe24.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: [\r\n            'Helvetica',\r\n            '-apple-system',\r\n            'Noto Sans TC',\r\n        ].join(','),\r\n        h4: {\r\n            fontSize: '1.25rem',\r\n            fontWeight: 500\r\n        }\r\n    },\r\n    palette: {\r\n        primary: purple,\r\n        secondary: green,\r\n    },\r\n    status: {\r\n        danger: 'orange',\r\n    },\r\n});\r\n\r\nexport default theme","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport * as csv from \"csvtojson\";\nimport theme from './themes'\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport styled from 'styled-components';\n\n\nconst useFetch = (url, options) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(url, options);\n        const text = await res.text();\n        csv().fromString(text).then(json => setResponse(json));\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, []);\n  return { response, error };\n};\n\nconst groupAnswers = array => {\n  return array.map(arr => {\n    let pureAnswer = {\n      ...arr\n    }\n\n    const ignoreKeys = ['question', 'question_title', 'description_text']\n    ignoreKeys.forEach(k => delete pureAnswer[k])\n\n    let answers = {}\n\n    for (let [key, value] of Object.entries(pureAnswer)) {\n      if (!answers[value]) {\n        answers[value] = [key]\n      } else {\n        answers[value].push(key)\n      }\n    }\n\n    return {\n      ...arr,\n      answers\n    }\n  })\n};\n\nconst Group = styled(Grid)`\n  text-align: center;\n`\nconst AvatarContainer = styled(Grid)`\n  .avatar {\n    width: 64px;\n    height: 64px;\n  }\n\n  .name {\n    margin: ${theme.spacing(1)}px;\n  }\n`\n\nconst AvatarChart = props => {\n  const { answers } = props\n  return <Grid container justify='space-around'>\n    {Object.entries(answers).map(pair => {\n      const [label, ppl] = pair\n      return <Group item xs={12} sm>\n        <Typography variant=\"h5\" gutterBottom>\n          {ppl.length}\n        </Typography>\n        <Typography variant=\"h6\" gutterBottom>\n          {label}\n        </Typography>\n        <Grid container justify='center'>\n          {ppl.map(p => <AvatarContainer item>\n            <Grid container direction='column' alignItems='center'>\n              <Avatar className='avatar' alt={p} src=\"/static/images/avatar/1.jpg\" />\n              <span className='name'>{p}</span>\n            </Grid>\n          </AvatarContainer>)}\n        </Grid>\n      </Group>\n    })}\n  </Grid>\n}\n\n\n\nfunction App() {\n  const res = useFetch(`https://docs.google.com/spreadsheets/d/e/2PACX-1vTDHXuMnpG9pwpg4nmDzzT0uLeXwx6DsoKmbmDP0Md-ljfmngZk54ldm8drFhpyqdMQeChwN5Te0TCS/pub?gid=2129939499&single=true&output=csv`, {});\n  if (!res.response) {\n    return <div>Loading...</div>\n  }\n\n\n  const data = groupAnswers(res.response)\n\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"lg\">\n        {data.map(dat => {\n          return <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Typography variant=\"h4\" gutterBottom>{dat.question_title}</Typography>\n              <Typography variant=\"body1\" paragraph>{dat.description_text}</Typography>\n              <AvatarChart answers={dat.answers} />\n            </Grid>\n          </Grid>\n        })}\n\n      </Container>\n    </ThemeProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}